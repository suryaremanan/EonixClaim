# General Guidelines

## Language & Style
- **Primary language:** Python (3.9)
- **Style Guidelines:** Adhere to PEP 8 style guidelines.
- **Code Quality:** Write modular, well-documented code with clear inline comments and comprehensive docstrings.

## Modularity
- **Separation of Concerns:** Each major functionality (YOLO detection, telematics simulation, Salesforce integration, blockchain, AI/ML, and Slack integration) must be implemented in separate modules.
- **Reusability:** Ensure that functions and classes are self-contained and reusable.

## Documentation
- **Docstrings:** Include comprehensive docstrings for all modules, classes, and functions.
- **External References:** Reference external documentation or API links when necessary.

---

# Module-Specific Rules

## 1. Image Processing & YOLO Object Detection
- **Framework:** Use PyTorch or TensorFlow with a pre-trained YOLO model (preferably YOLOv8).
- **Preprocessing:**
  - Resize, normalize, and standardize input images.
  - Validate image formats before processing.
- **Output:**
  - Return bounding boxes with clear classifications.
  - Annotate results with confidence scores and labels.

## 2. Telematics Data Processing
- **Libraries:** Use NumPy and Pandas.
- **Data Processing:**
  - Process and analyze real vehicle telemetry data from the GitHub repository (https://github.com/cjporteo/vehicle-telematics-clustering).
  - Extract relevant features including speed, acceleration, braking patterns, throttle position, and engine metrics.
  - Clean and normalize the data, handling outliers and inconsistencies.
- **Feature Engineering:**
  - Calculate derived metrics like acceleration, braking intensity, and driving patterns.
  - Implement percentile-based statistics for key metrics as demonstrated in the reference repository.
- **Risk Assessment:**
  - Develop functions to evaluate driving risk based on the processed telemetry data.
  - Integrate the risk assessments into usage-based insurance calculations.
- **Data Integration:**
  - Ensure the processed data can be seamlessly fed into other system components (Salesforce, ML models, etc.).

## 3. Salesforce Integration (Agentforce)
- **API Integration:**
  - Use the `simple_salesforce` library for accessing Salesforce APIs.
  - Securely manage API keys and credentials.
- **Data Flow:**
  - Automate the pushing of processed image data and telematics insights into Salesforce.
  - Trigger Agentforce agents for claim initiation, customer notifications, and policy updates.
- **Error Handling:**
  - Include robust error handling for API failures and timeouts.

## 4. AI & Machine Learning Modules
- **Fraud Detection & Predictive Maintenance:**
  - Utilize ML libraries such as scikit-learn, PyTorch, or TensorFlow.
  - Validate training data and use proper evaluation metrics.
  - Provide guidelines for model retraining and performance monitoring.
- **Integration:**
  - Ensure smooth interaction between AI models and the Salesforce/telmatics modules.
  - In cases of detected fraudulent claims, enforce strict, pre-defined response messaging.

## 5. Blockchain Integration
- **Platform:**
  - Choose a blockchain platform (e.g., Ethereum test network or Hyperledger) for secure, immutable storage of claims and transaction logs.
- **Smart Contracts:**
  - Write smart contracts that guarantee transparency and prevent data tampering.
- **Data Security:**
  - Emphasize encryption and proper access controls when handling blockchain interactions.

## 6. Slack Chat Integration
- **User Interface:**
  - Implement a Slack-based interactive interface as the primary user interaction method.
  - Leverage Slack's native features: file uploads, interactive messages, modals, and events.
- **File Uploads:**
  - Allow users to upload pictures of damaged vehicles directly within Slack.
  - Process uploaded images using the YOLO module.
- **Interactivity:**
  - Use Slack's Block Kit to create modals and interactive messages for scheduling repairs or handling claims.
  - Provide clear feedback and confirmations within the Slack chat.
- **Strict Response Handling:**
  - For cases such as fraudulent claims, configure the bot to return strict, pre-defined messages (e.g., warnings or escalation prompts).
- **Authentication & Permissions:**
  - Ensure the Slack app is configured with the required scopes (e.g., `files:read`, `files:write`, `chat:write`, etc.) and proper OAuth handling.
- **Data Flow Integration:**
  - Seamlessly integrate Slack interactions with the underlying processes (image detection, telematics, Salesforce updates, blockchain logging).

---

# Cursor AI Guidelines

## Module Prioritization
- Always consider module-specific rules before generating code.
- When in doubt, ask for clarification within the project context.

## Library & Versioning
- Use up-to-date libraries and avoid deprecated methods.
- Ensure consistency in library versions across different modules.

## Code Clarity
- Focus on writing clean, modular, and well-documented code.
- Use descriptive variable and function names.

## Integration Focus
- Ensure that data flows seamlessly from image processing to telematics simulation, then to Salesforce integration, AI/ML modules, blockchain storage, and finally to Slack for user engagement.
- Emphasize robust error handling and logging for easier debugging.

## Robustness & Testing
- Implement comprehensive unit tests for each module.
- Prioritize exception handling and logging, especially for external API interactions (Salesforce, Slack, Blockchain).

## Documentation & References
- Include references to official documentation for the Slack API, Salesforce API, and chosen ML frameworks.
- Maintain an up-to-date README and developer guide for the project.
